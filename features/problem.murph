# Node object
func node(val, next) {
    return this;
}

# Stack object
func stack(head, size) {

    func push(val) {
        let n = node(val, head);
        head = n;
    }

    func pop() {
        let returnValue = head.val;
        head = head.next;
        return returnValue;
    }

    func display() {
        let iter = head;
        while (iter != null) {
            println(iter.val);
            iter = iter.next;
        }
    }

    return this;
}

let input = read(); # Read from stdin, returns an array of lexemes.

# RPN Calculator Function

func rpn(input) {
    let i = 0;
    let s = stack(null, 0);
    while (i < length(input)) {
        if (type(input[i]) == "INTEGER") {
            s.push(input[i]);
        } else {
            let a = s.pop();
            let b = s.pop();
            if (type(input[i]) == "MULT") {
                s.push(b * a);
            } else if (type(input[i]) == "PLUS") {
                s.push(b + a);
            } else if (type(input[i]) == "MINUS") {
                s.push(b - a);
            } else if (type(input[i]) == "DIVIDE") {
                s.push(b / a);
            } else if (type(input[i]) == "RAISE") {
                s.push(b ** a);
            } else {
                println("THIS OPERATION IS NOT PERMITTED");
            }
        }
        i = i + 1;
    }

    return s.pop();
}

# Display the result of the RPN calculation
println(rpn(input));
