# Node Class
func node(key, value, parent) {
    let key = key;
    let val = value;
    let p = parent;
    let l = null;
    let r = null;
    let lHeight = 0;
    let rHeight = 0;
    let height = 0;
    return this;
}

# AVL Tree class
func avl() {

    let size = 0;
    let root = null;

    func max(x, y) {
        if (x > y) {
            return x;
        } else {
            return y;
        }
    }

    func setBalance(x) {
        if (x.l == null) {
            x.lHeight = 0;
        } else {
            let left = x.l;
            x.lHeight = left.height;
        }
        if (x.r == null) {
            x.rHeight = 0;
        } else {
            x.rHeight = x.r.height;
        }
        x.height = max(x.lHeight, x.rHeight) + 1;
        let p = x.p;
        if (p != null) {
            if (isRight(x)) {
                p.rHeight = x.height;
            } else {
                p.lHeight = x.height;
            }
        }
    }

    func sibling(x) {
        if (x == x.p.l) {
            return x.p.r;
        } else {
            return x.p.l;
        }
    }

    func bFactor(x) {
        return x.lHeight - x.rHeight;
    }

    func isRight(x) {
        return x == x.p.r;
    }

    func isLeft(x) {
        return x == x.p.l;
    }

    func favorSibling(x) {
        if (isRight(x)) {
            if (bFactor(x.p) == 1) { return true; }
            else if (bFactor(x.p) == neg(1)) {
                return false;
            } else { return false; }
        } else {
            if (bFactor(x.p) == 1) { return false; }
            else if (bFactor(x.p) == neg(1)) {
                return true;
            } else { return false; }
        }
    }

    func isBalanced(x) {
        if (bFactor(x) == 1) {
            return true;
        } else if (bFactor(x) == neg(1)) {
            return true;
        } else if (bFactor(x) == 0) {
            return true;
        } else {
            return false;
        }
    }

    func favoriteChild(x) {
        if (bFactor(x) == 1) {
            return x.l;
        } else if (bFactor(x) == neg(1)) {
            return x.r;
        } else {
            return null;
        }
    }

    func notLinear(p, x, y) {
        if (p.r == x) {
            if (x.r == y) {
                return false;
            }
        } else if (p.l == x) {
            if (x.l == y) {
                return false;
            }
        }
        return true;
    }

    func rotateYX(y, x) {
        if (isLeft(y)) {
            rotateRight(y, x);
        } else {
            rotateLeft(y, x);
        }
    }

    func rotateYP(y, p) {
        if (isLeft(y)) {
            rotateRight(y, p);
        } else {
            rotateLeft(y, p);
        }
    }

    func rotateXP(x, p) {
        if (isRight(x)) {
            rotateLeft(x, p);
        } else {
            rotateRight(x, p);
        }
    }

    func rotateLeft(a, b) {
        let left = a.l;
        let p = b.p;
        if (p == null) {
            root = a;
        } else {
            if (isLeft(b)) {
                p.l = a;
            } else {
                p.r = a;
            }
        }
        a.l = b;
        b.r = left;
        if (left != null) {
            left.p = b;
        }
        b.p = a;
        a.p = p;
    }

    func rotateRight(a, b) {
        let right = a.r;
        let p = b.p;
        if (p == null) {
            root = a;
        } else {
            if (isLeft(b)) {
                p.l = a;
            } else {
                p.r = a;
            }
        }
        a.r = b;
        b.l = right;
        if (right != null) {
            right.p = b;
        }
        b.p = a;
        a.p = p;
    }

    func fix(x) {
        while (x != root) {
            if (favorSibling(x)) {
                setBalance(x.p);
                x = root;
            } else if (isBalanced(x.p)) {
                setBalance(x.p);
                x = x.p;
            } else {
                let y = favoriteChild(x);
                let p = x.p;
                if (y != null) {
                    if (notLinear(p, x, y)) {
                        rotateYX(y, x);
                        rotateYP(y, p);
                        setBalance(x);
                        setBalance(p);
                        setBalance(y);
                    }
                } else {
                    rotateXP(x, p);
                    setBalance(p);
                    setBalance(x);
                }
                x = root;
            }
        }
    }

    func insert(k, v) {
        size = size + 1;

        let new = node(k, v, null);

        if (root == null) {
            root = new;
        } else {
            let p = root;
            while (p != null) {
                new = node(k, v, p);
                if (k == p.key) {
                    p.val = v;
                    p = null;
                } else if (k < p.key) {
                    if (p.l == null) {
                        p.l = new;
                        p.lHeight = 1;
                        fix(p.l);
                        p = null;
                    } else {
                        p = p.l;
                    }
                } else {
                    if (p.r == null) {
                        p.r = new;
                        p.rHeight = 1;
                        fix(p.r);
                        p = null;
                    } else {
                        p = p.r;
                    }
                }
            }
        }
    }

    func find(k) {
        let p = root;
        let a = null;
        while (p != null) {
            if (p.key == k) {
                a = p.val;
                p = null;
            } else {
                if (k < p.key) {
                    p = p.l;
                } else {
                    p = p.r;
                }
            }
        }
        return a;
    }

    return this;
}

#let tree = avl();

^
tree.insert(3);
tree.insert(4);
tree.insert(5);
tree.insert(1);
tree.insert(12);
tree.insert(55);
tree.insert(6);
tree.insert(90);
tree.insert(122);
tree.insert(54);
tree.insert(32);
tree.insert(15);
tree.insert(905);
tree.insert(67);
tree.insert(322);
tree.insert(78);
tree.insert(45);
tree.insert(46);
tree.insert(47);
tree.insert(48);
println(tree.find(78));
println(tree.find(90));
println(tree.find(62));
^

func dictionary() {
    let tree = avl();

    func addItem(key, value) {
        tree.insert(key, value);
    }

    func set(key, value) {
        tree.insert(key, value);
    }

    func size() {
        tree.size;
    }

    func get(key) {
        return tree.find(key);
    }

    return this;
}

let d = dictionary();
d.addItem("key1", "hello");
d.addItem("key2", "test2");
d.addItem("key3", "test3");
d.addItem("key4", "test2");
d.addItem("key5", "hey");
d.addItem("key6", "bye");
d.addItem("key7", "okay");
d.addItem("key8", "what?");
d.addItem("key9", 54);
d.addItem("key10", 90);
d.addItem("key11", 12);

println("Contents of dictionary...");
println(d.get("key1"));
println(d.get("key2"));
println(d.get("key3"));
println(d.get("key4"));
println(d.get("key5"));
println(d.get("key6"));
println(d.get("key7"));
println(d.get("key8"));
println(d.get("key9"));
println(d.get("key10"));
println(d.get("key11"));

println();

print("Size of dictionary...");
println(d.size());

println();

println("Change value of key3!");
print("Key3's value is currently...");
println(d.get("key3"));
print("Key3's new value is now...");
d.set("key3", "UPDATED");
println(d.get("key3"));

println("Change value of key10!");
print("Key10's value is currently...");
println(d.get("key10"));
print("Key10's new value is now...");
d.set("key10", 1000);
println(d.get("key10"));
